@{
    ViewData["Title"] = "Создание новой темы";
    ViewData["HideSidebar"] = true;
}

<link rel="stylesheet" type="text/css" href="/css/topic_style.css">

<body>
    <div class="container mt-5">
        <div class="card p-4 shadow-sm">
            <h3 class="mb-3">
                Создание новой темы
                <a asp-controller="home" asp-action="fullrules" class="rules-btn float-end">ПРАВИЛА</a>
            </h3>
            <form asp-action="CreateTopic" asp-controller="Topic" method="post">

                <!-- Заголовок -->
                <div class="mb-3">
                    <input name="title" type="text" maxlength="500" class="editor-textarea form-control" placeholder="Заголовок" required>
                </div>

                <!-- Категории -->
                <div class="mb-3">
                    <label for="categories" class="form-label">Категории</label>
                    <div id="categories-container" class="form-control p-3 d-flex flex-wrap gap-2">
                        <!-- Готовые категории -->
                        <span class="category-badge" data-value="Новости">Новости</span>
                        <span class="category-badge" data-value="Технологии">Технологии</span>
                        <span class="category-badge" data-value="Искусство">Искусство</span>
                        <span class="category-badge" data-value="Наука">Наука</span>
                        <span class="category-badge" data-value="Образование">Образование</span>
                        <span class="category-badge" data-value="Развлечения">Развлечения</span>
                        <span class="category-badge" data-value="Спорт">Спорт</span>
                        <span class="category-badge" data-value="Музыка">Музыка</span>
                        <span class="category-badge" data-value="Другое">Другое</span>

                    </div>
                    <input type="hidden" name="categories" id="categories-hidden" required/>
                    <span id="categories-error" class="error-message"></span>
                </div>

                <!-- Теги -->
                <div class="mb-3">
                    <label for="categories" class="form-label">Теги</label>
                    <div id="editor" class="editor-textarea form-control mt-0" contenteditable="true" placeholder="Введите тег" onkeydown="addTag(event)"></div>
                    <div id="tags-list" class="mt-2">
                        <!-- Сюда будут добавляться теги -->
                    </div>
                    <input type="hidden" id="tags-input" name="tags" required />
                    <span id="tags-error" class="error-message"></span>
                </div>


                <!-- Панель инструментов для редактирования -->
                <div class="editor-toolbar d-flex justify-content-start gap-2">
                    <button type="button" class="toolbar-btn" onclick="execCommand('bold')"><b>Ж</b></button>
                    <button type="button" class="toolbar-btn" onclick="execCommand('italic')"><i>К</i></button>
                    <button type="button" class="toolbar-btn" onclick="execCommand('underline')"><u>П</u></button>
                    <button type="button" class="toolbar-btn" onclick="execCommand('insertUnorderedList')">• Список</button>
                </div>

                <div name="content" style="min-height: 200px;" class="editor-textarea form-control mt-0 custom-editor" contenteditable="true" placeholder="Ваше сообщение" required onkeydown="checkContentLength(event)"></div>
                <!-- Редактируемый контент -->

                <textarea hidden name="content" id="ta" class="editor-textarea form-control mt-0" contenteditable="true" placeholder="Ваше сообщение"></textarea>



                <!-- Кнопка отправки -->
                <div class="text-center mt-4">
                    <!-- Измените кнопку отправки формы, чтобы она вызывала validateForm -->
                    <input type="submit" class="btn btn-primary" onclick="return copyAndValidateForm()">
                </div>
            </form>
        </div>
    </div>


    <script>
        function checkContentLength(event) {
            const editor = event.target;
            const maxLength = 5000; // Максимальное количество символов (приблизительно 5000 строк)

            if (editor.innerText.length >= maxLength && event.key !== "Backspace" && event.key !== "Delete") {
                event.preventDefault(); // Предотвращаем ввод, если количество символов достигло лимита
            }
        }
    </script>

    <script>
        // Функция для копирования текста из div в textarea
        function CopyDivsToTextArea() {
            var divs = document.getElementsByTagName("div");
            let textToTransfer = "";
            var pattern = new RegExp("editor-textarea");

            for (var i = 0; i < divs.length; i++) {
                if (pattern.test(divs[i].className)) {
                    textToTransfer = divs[i].innerHTML.trim();
                }
            }

            // Сохранение пробелов и переводов строк
            textToTransfer = textToTransfer.replace(/ /g, '\u00A0');  // заменяет пробелы на неразрывные пробелы
            textToTransfer = textToTransfer.replace(/\n/g, '\u000A');  // оставляем переводы строк

            document.getElementById("ta").value = textToTransfer;
        }

        // Функция для копирования текста и проверки формы
        function copyAndValidateForm() {
            CopyDivsToTextArea(); // Копируем текст из div в textarea

            if (validateForm()) {
                return true; // Форма отправляется
            } else {
                return false; // Форма не отправляется
            }
        }

        // Функция валидации формы
        function validateForm() {
            let textarea = document.getElementById("ta");
            let categoriesHidden = document.getElementById("categories-hidden");
        let tagsInput = document.getElementById("tags-input"); // Исправлено

            if (!textarea.value.trim()) {
                alert("Пожалуйста, заполните текст!");
                return false;
            }

            if (!categoriesHidden.value.trim()) {
                alert("Выберите хотя бы одну категорию!");
                return false;
            }

        if (!tagsInput.value.trim()) { // Теперь проверяется правильный элемент
            alert("Добавьте хотя бы один тег!");
            return false;
        }

            return true;
        }
    </script>


    <!-- Основные скрипты-->
    <script>
        const categoryBadges = document.querySelectorAll('.category-badge');
        const categoriesHidden = document.getElementById('categories-hidden');
        let selectedCategories = [];

        categoryBadges.forEach(badge => {
            badge.addEventListener('click', () => {
                const category = badge.getAttribute('data-value');

                if (selectedCategories.includes(category)) {
                    // Удаляем из выбранных
                    selectedCategories = selectedCategories.filter(cat => cat !== category);
                    badge.classList.remove('selected');
                } else {
                    // Добавляем в выбранные
                    selectedCategories.push(category);
                    badge.classList.add('selected');
                }

                // Обновляем скрытое поле
                categoriesHidden.value = selectedCategories.join(',');
            });
        });
    </script>

    <script>
        function addTag(event) {
            const editor = event.target;
            const maxLength = 25; // Максимальное количество символов

            if (editor.innerText.length >= maxLength && event.key !== "Backspace" && event.key !== "Delete") {
                event.preventDefault(); // Предотвращаем ввод, если количество символов достигло лимита
            }
            // Слушаем нажатие клавиши
            if (event.key === "Enter" || event.key === " ") {
                event.preventDefault(); // Предотвращаем создание новой строки
                let editor = document.getElementById('editor');
                let tag = editor.textContent.trim(); // Получаем текст

                // Если тег не пустой, добавляем его
                if (tag && !tag.startsWith('#')) { // Проверка, что тег не начинается с #
                    tag = '#' + tag; // Добавляем # в начало тега
                }

                // Проверяем, что количество тегов не превышает 25
                let tagsList = document.getElementById('tags-list');
                if (tagsList.children.length < 25 && tag) {
                    // Создаем новый элемент для тега
                    let tagElement = document.createElement('span');
                    tagElement.classList.add('tag');
                    tagElement.textContent = tag;

                    // Добавляем обработчик для удаления тега по клику
                    tagElement.onclick = function() {
                        tagsList.removeChild(tagElement); // Удаляем тег при клике
                        updateTagsInput(); // Обновляем скрытое поле после удаления
                    };

                    // Добавляем тег в список
                    tagsList.appendChild(tagElement);

                    // Обновляем скрытое поле с тегами
                    updateTagsInput();

                    // Очищаем поле ввода
                    editor.textContent = '';
                } else if (tagsList.children.length >= 25) {
                }
            }
        }

        // Функция для обновления скрытого поля с тегами
        function updateTagsInput() {
            let tagsList = document.getElementById('tags-list');
            let tags = [];
            tagsList.querySelectorAll('.tag').forEach(function(tagElement) {
                tags.push(tagElement.textContent);
            });
            document.getElementById('tags-input').value = tags.join(',');
        }
    </script>

    <script>
                document.addEventListener("DOMContentLoaded", function () {
            const editor = document.querySelector(".custom-editor");

            editor.addEventListener("paste", function (event) {
                event.preventDefault();

                // Получаем текст без форматирования
                const text = (event.clipboardData || window.clipboardData).getData("text");

                // Вставляем чистый текст без HTML-тегов
                document.execCommand("insertText", false, text);
            });
        });
    </script>

    <!-- Bootstrap Icons -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

