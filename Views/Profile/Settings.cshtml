@using Profile

@model ProfileSettingsViewModel

@{
    ViewData["Title"] = "Редактирование профиля";
}

<link rel="stylesheet" type="text/css" href="/css/profile_style.css">
<link rel="stylesheet" type="text/css" href="/css/site.css">
<link rel="stylesheet" type="text/css" href="/css/login_reg_layout_style.css">
<link rel="stylesheet" type="text/css" href="/css/search.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />
<link href="https://unpkg.com/filepond/dist/filepond.min.css" rel="stylesheet">
<link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css" rel="stylesheet">
<link href="https://unpkg.com/filepond-plugin-image-crop/dist/filepond-plugin-image-crop.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<!-- Toast-ошибка -->
@if (TempData["ErrorMessage"] != null)
{
    <div id="custom-toast-error" class="custom-toast-error show">
        <div class="toast-icon"><i class="bi bi-exclamation-triangle-fill"></i></div>
        <div class="toast-content">@TempData["ErrorMessage"]</div>
        <button type="button" class="toast-close" onclick="closeToastError()">&times;</button>
    </div>
    <script>
        setTimeout(() => {
            document.getElementById('custom-toast-error')?.classList.remove('show');
        }, 3500);
        function closeToastError() {
            document.getElementById('custom-toast-error').classList.remove('show');
        }
    </script>
}

<div class="settings-page">
    <!-- Заголовок с кнопкой назад -->
    <div class="settings-header d-flex align-items-center mb-4">
        <h3 class="mb-0">Настройки профиля</h3>
    </div>

    <!-- Навигация по вкладкам -->
    <ul class="nav nav-tabs settings-nav mb-4" id="settingsTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab">
                Профиль
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="security-tab" data-bs-toggle="tab" data-bs-target="#security" type="button" role="tab">
                Безопасность
            </button>
        </li>
    </ul>

    <!-- Контент вкладок -->
    <div class="tab-content" id="settingsTabContent">
        <!-- Вкладка профиля -->
        <div class="tab-pane fade show active" id="profile" role="tabpanel" aria-labelledby="profile-tab">
            <form asp-action="UpdateProfile" asp-controller="Profile" method="post" enctype="multipart/form-data">
                <!-- Аватар -->
                <div class="avatar-block">
                    <label>Аватар</label>
                    <div class="avatar-wrapper">
                        <img src="@(HttpContextAccessor.HttpContext.Session.GetString("AvatarUrl") ?? "/img/default-avatar.png")"
                             alt="Аватар" class="avatar-preview">
                        <label class="btn btn-outline-primary">
                            Изменить
                            <input type="file" name="avatar" accept="image/*" style="display: none;" onchange="handleImageSelect(this, true)">
                        </label>
                        <input type="hidden" name="croppedAvatar" id="croppedAvatar">
                    </div>
                </div>

                <!-- Баннер -->
                <div class="banner-block">
                    <label>Баннер</label>
                    <div class="banner-wrapper">
                        <img src="@(HttpContextAccessor.HttpContext.Session.GetString("Background") ?? "/img/default-banner.png")"
                             alt="Баннер" class="banner-preview">
                        <label class="btn btn-outline-primary">
                            Изменить
                            <input type="file" name="banner" accept="image/*" style="display: none;" onchange="handleImageSelect(this, false)">
                        </label>
                        <input type="hidden" name="croppedBanner" id="croppedBanner">
                    </div>
                </div>

                <!-- Основная информация -->
                <div class="form-group mb-3">
                    <input class="form-control" type="text" name="username" placeholder="Никнейм" 
                           value="@HttpContextAccessor.HttpContext.Session.GetString("UserName")" minlength="3" maxlength="25">
                </div>
                <div class="form-group mb-3">
                    <select class="form-select" name="gender">
                        @{
                            var selectedGender = HttpContextAccessor.HttpContext?.Session?.GetString("Gender") ?? "Не указан";
                            var genders = new[] { "Не указан", "Мужской", "Женский" };
                            foreach (var gender in genders)
                            {
                                <option value="@gender" selected="@(gender == selectedGender)">@gender</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group mb-4">
                    <textarea class="form-control" name="about" placeholder="О себе" rows="3">@HttpContextAccessor.HttpContext.Session.GetString("About")</textarea>
                </div>

                <button type="submit" class="btn btn-primary w-100">Сохранить изменения</button>
            </form>
        </div>

        <!-- Вкладка безопасности -->
        <div class="tab-pane fade" id="security" role="tabpanel" aria-labelledby="security-tab">
            <!-- Смена пароля -->
            <div class="mb-4">
                <h4 class="mb-3">Смена пароля</h4>
                <form asp-action="ChangePassword" asp-controller="Profile" method="post">
                    <div class="form-group mb-3">
                        <input type="password" class="form-control" name="currentPassword" placeholder="Текущий пароль">
                    </div>
                    <div class="form-group mb-3">
                        <input type="password" class="form-control" name="newPassword" placeholder="Новый пароль">
                    </div>
                    <div class="form-group mb-3">
                        <input type="password" class="form-control" name="confirmPassword" placeholder="Подтвердите пароль">
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Сменить пароль</button>
                </form>
            </div>

            <!-- Смена почты -->
            <div>
                <h4 class="mb-3">Смена почты</h4>
                <form asp-action="ChangeEmail" asp-controller="Profile" method="post">
                    <div class="form-group mb-3">
                        <small class="text">Текущая почта: </small>
                        <label type="text">@HttpContextAccessor.HttpContext.Session.GetString("Email")</label>
                    </div>
                    <div class="form-group mb-3">
                        <input type="email" class="form-control" name="newEmail" placeholder="Новая почта">
                    </div>
                    <div class="form-group mb-3">
                        <input type="password" class="form-control" name="password" placeholder="Текущий пароль">
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Сменить почту</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .modal-content {
        background-color: var(--background-color);
        border: 1px solid var(--border-color);
        color: var(--text-color);
    }

    .modal-header {
        border-bottom: 1px solid var(--border-color);
        background-color: var(--background-color);
    }

    .modal-footer {
        border-top: 1px solid var(--border-color);
        background-color: var(--background-color);
    }

    .btn-close {
        filter: invert(1);
        opacity: 0.7;
    }

    .btn-close:hover {
        opacity: 1;
    }

    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.7);
    }

    .img-container {
        background-color: var(--background-color);
    }

    .cropper-view-box,
    .cropper-face {
        border-radius: 50%;
        background-color: var(--background-color) !important;
    }

    .cropper-modal {
        background-color: var(--background-color);
        opacity: 0.8;
    }
</style>
<!-- Модальное окно для обрезки аватара -->
<div class="modal fade" id="cropperModalAvatar" tabindex="-1" aria-labelledby="cropperModalAvatarLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalAvatarLabel">Обрезка аватара</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="avatarImage" src="" alt="Аватар для обрезки">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="cropImage(true)">Обрезать</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для обрезки баннера -->
<div class="modal fade" id="cropperModalBanner" tabindex="-1" aria-labelledby="cropperModalBannerLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalBannerLabel">Обрезка баннера</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="bannerImage" src="" alt="Баннер для обрезки">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="cropImage(false)">Обрезать</button>
            </div>
        </div>
    </div>
</div>

<!-- Скрипты -->
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

<script>
let cropper = null;
let currentModal = null;

function handleImageSelect(input, isAvatar) {
    if (input.files && input.files[0]) {
        const reader = new FileReader();
        const modalId = isAvatar ? 'cropperModalAvatar' : 'cropperModalBanner';
        const imageId = isAvatar ? 'avatarImage' : 'bannerImage';
        
        reader.onload = function(e) {
            const image = document.getElementById(imageId);
            image.src = e.target.result;
            
            // Показываем модальное окно
            currentModal = new bootstrap.Modal(document.getElementById(modalId));
            currentModal.show();
            
            // Инициализируем кроппер после того, как модальное окно открылось
            document.getElementById(modalId).addEventListener('shown.bs.modal', function() {
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(image, {
                    aspectRatio: isAvatar ? 1 : 3.5,
                    viewMode: 2,
                    dragMode: 'move',
                    autoCropArea: 1,
                    restore: false,
                    guides: true,
                    background: false,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                });
            });
        };
        reader.readAsDataURL(input.files[0]);
    }
}

function cropImage(isAvatar) {
    if (!cropper) return;
    
    const canvas = cropper.getCroppedCanvas({
        width: isAvatar ? 150 : 600,
        height: isAvatar ? 150 : 171
    });
    
    // Обновляем превью
    const preview = isAvatar ? document.querySelector('.avatar-preview') : document.querySelector('.banner-preview');
    const croppedData = canvas.toDataURL('image/jpeg');
    preview.src = croppedData;
    
    // Сохраняем обрезанное изображение в скрытое поле
    const hiddenInput = isAvatar ? document.getElementById('croppedAvatar') : document.getElementById('croppedBanner');
    hiddenInput.value = croppedData;
    
    // Закрываем модальное окно
    if (currentModal) {
        currentModal.hide();
        currentModal = null;
    }
    
    // Уничтожаем кроппер
    cropper.destroy();
    cropper = null;
}

// Обработка закрытия модальных окон
['cropperModalAvatar', 'cropperModalBanner'].forEach(modalId => {
    document.getElementById(modalId).addEventListener('hidden.bs.modal', function() {
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    });
});

$(document).ready(function() {
    // Инициализация вкладок
    $('#settingsTabs button').on('click', function (e) {
        e.preventDefault();
        $(this).tab('show');
    });

    // Обработка переключения вкладок
    $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
        // Удаляем активный класс у всех кнопок
        $('.nav-link').removeClass('active');
        // Добавляем активный класс текущей кнопке
        $(e.target).addClass('active');
    });
});
</script>
