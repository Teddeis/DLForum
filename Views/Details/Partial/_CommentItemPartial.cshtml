@model CommentItemViewModel
@{
    var currentUserId = Context.Session.GetInt32("ID");
    var hasReplies = Model.AllComments != null && Model.AllComments.Any(c => c.parent_id == Model.Comment.Id);
}

<li class="comment-item" data-comment-id="@Model.Comment.Id">
    <div class="comment-header">
        <img src="@Model.Comment.users.avatar_url" alt="Avatar" class="rounded-circle"
             style="width: 30px; height: 30px; object-fit: cover; margin-right: 8px;" />
             <span class="user-role"
              style="font-size: 13px; font-weight: bold; color: white;
                     background-color: @(Model.Comment.users?.role == "admin" ? "#dc3545"
                                     : Model.Comment.users?.role == "moderator" ? "#17a2b8"
                                     : Model.Comment.users?.role == "vip" ? "#ffd500"
                                     : Model.Comment.users?.role == "banned" ? "#6c757d"
                                     : "#007bff");
                     padding: 2px 8px; border-radius: 12px; margin-right: 7px;">
            @Model.Comment.users?.role
        </span>
        @{
            if (currentUserId == Model.Comment.id_users)
            {
                <a class="comment-author back-link" href="@Url.Action("profile", "profile")">
                    @Model.Comment.users?.username
                </a>
            }
            else
            {
                <a class="comment-author back-link"
                   href="@Url.Action("users", "profile", new { id = Model.Comment.id_users })">
                    @Model.Comment.users?.username
                </a>
            }
        }
        <span class="comment-time" style="font-size: 12px; color: #888; margin-left: 8px;">
            @Model.Comment.created.ToString("HH:mm dd MMM yyyy")
        </span>
    </div>
    <div class="comment-body">
        <p style="margin: 0; white-space: pre-line;">@Model.Comment.comments</p>
    </div>
    <div class="comment-actions">
        @{
            <button class="btn btn-sm btn-outline-primary reply-btn"
                    style="font-size: 12px; padding: 2px 8px; border-radius: 15px;"
                    data-comment-id="@Model.Comment.Id">
                Ответить
            </button>
            if (currentUserId != Model.Comment.id_users && !Model.IsBanned)
            {
                <button class="btn btn-sm btn-outline-danger report-button"
                        style="font-size: 12px; padding: 2px 8px; border-radius: 15px;"
                        data-bs-toggle="modal" data-bs-target="#reportModal"
                        data-comment-id="@Model.Comment.Id"
                        data-user-id="@Model.Comment.id_users"
                        data-username="@Model.Comment.users?.username">
                    Пожаловаться
                </button>
            }
            if (hasReplies)
            {
                <button class="toggle-replies-btn btn btn-sm btn-outline-secondary"
                        type="button"
                        data-comment-id="@Model.Comment.Id"
                        style="font-size: 12px; padding: 2px 8px; border-radius: 15px; color:var(--text-color)">
                    Скрыть ответы
                </button>
            }
        }
    </div>
    <div class="reply-form-container"></div>

    @if (hasReplies)
    {
        <ul class="replies-list" style="display: block;">
            @foreach (var reply in Model.AllComments.Where(c => c.parent_id == Model.Comment.Id))
            {
                @await Html.PartialAsync("~/Views/Details/Partial/_CommentItemPartial.cshtml", new CommentItemViewModel
   {
       Comment = reply,
       AllComments = Model.AllComments,
       TopicId = Model.TopicId,
       IsBanned = Model.IsBanned
   })
            }
        </ul>
    }
</li>





