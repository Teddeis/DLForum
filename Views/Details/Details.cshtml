@model Topic

@{
    ViewData["Title"] = @Model.Title;
    @inject IHttpContextAccessor HttpContextAccessor
    bool isOwner = HttpContextAccessor.HttpContext.Session.GetInt32("ID") == @Model.UserId; // Проверка, является ли текущий пользователь владельцем темы
}
<style>
    /* Общие переменные темы */
    :root {
        --background-color: #ffffff; /* Светлая тема */
        --text-color: #333333;
        --card-background: #f9f9f9;
        --comment-border: #ddd;
    }

    [data-theme="dark"] {
        --background-color: #1a1a1b; /* Тёмная тема */
        --text-color: #d7dadc;
        --card-background: #2a2a2b;
        --comment-border: #444;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        transition: background-color 0.3s, color 0.3s;
    }

    nav {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .back-link {
        font-size: 16px;
        color: var(--text-color);
        text-decoration: none;
    }

    .nav-right {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .main-content {
        max-width: 2000px;
        margin: 0 auto;
        padding: 20px;
        background-color: var(--card-background);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        transition: background-color 0.3s;
    }

    .content-info {
        margin-bottom: 20px;
    }

    .title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        word-wrap: break-word;
    }

    .description {
        font-size: 16px;
        line-height: 1.5;
        word-wrap: break-word;
    }

    .author {
        font-size: 14px;
        color: #007BFF;
        margin-bottom: 10px;
    }

    .likes-and-comments {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .answers {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
    }

    textarea {
        width: 100%;
        height: 80px;
        padding: 10px;
        border: 1px solid var(--comment-border);
        border-radius: 5px;
        margin-bottom: 10px;
        resize: none;
        background-color: var(--card-background);
        color: var(--text-color);
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }

    .post-answer {
        padding: 10px 20px;
        background-color: #007BFF;
        color: #fff;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

        .post-answer:hover {
            background-color: #0056b3;
        }

    .delete-topic-btn {
        padding: 6px 12px;
        background-color: #dc3545;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        font-size: 14px;
    }

        .delete-topic-btn:hover {
            background-color: #c82333;
        }

    .views-count {
        color: #6c757d;
        font-size: 14px;
    }

    .comments-section {
        margin-top: 30px;
        padding: 20px;
        border-top: 1px solid var(--comment-border);
    }

    .comments-list {
        list-style: none;
        padding: 0;
    }

    .comment-item {
        margin-bottom: 15px;
        padding: 10px;
        border: 1px solid var(--comment-border);
        border-radius: 5px;
        background-color: var(--card-background);
        color: var(--text-color);
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }

    .comment-header {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .comment-body {
        font-size: 14px;
    }


    .image-gallery {
        position: relative;
        max-width: 100%;
        height: 500px;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .image-gallery img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

    .nav-button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0, 0, 0, 0.5);
        color: #fff;
        border: none;
        padding: 10px;
        font-size: 20px;
        cursor: pointer;
        z-index: 10;
    }

    .prev-btn {
        left: 10px;
    }

    .next-btn {
        right: 10px;
    }

    .comments-title {
        font-weight: 700; /* Устанавливаем более толстый шрифт */
        font-size: 20px; /* Если нужно увеличить размер */
        color: var(--text-color); /* Цвет текста */
    }


    /* Контейнер для всех категорий */
    .category-badge {
        display: inline-flex;
        flex-wrap: wrap; /* Разрешаем категориям переноситься на следующую строку, если места не хватает */
        gap: 10px; /* Отступ между категориями */
        margin-bottom: 15px;
        cursor: default; /* Отключаем курсор-палец для всего блока */
    }

    /* Стиль для отдельных категорий */
    .category-tag {
        padding: 6px 14px; /* Чуть больше отступов для лучшего визуального восприятия */
        border-radius: 18px; /* Меньше скругления, чтобы они выглядели более стильно */
        color: var(--text-color);
        font-size: 12px; /* Немного уменьшен шрифт, чтобы не перегружать пространство */
        font-weight: 600; /* Полужирный шрифт для выделения */
        border: 1px solid #ddd; /* Лёгкая граница, которая сохраняет вид разделения */
        background-color: var(--card-background); /* Лёгкий фон для категории */
        transition: background-color 0.3s ease, transform 0.3s ease, color 0.3s ease; /* Плавные переходы */
        cursor: pointer; /* Курсор меняется на указатель для интерактивных элементов */
    }

        /* Эффект при наведении на категорию */
        .category-tag:hover {
            background-color: #007bff; /* Изменение фона на синий при наведении */
            color: #fff; /* Белый цвет текста при наведении */
            transform: translateY(-2px); /* Легкий эффект подъема при наведении */
        }

        /* Дополнительный стиль для неактивной категории (если нужно для состояния) */
        .category-tag:active {
            transform: translateY(1px); /* Легкий эффект нажатия */
        }

        /* Для категорий, которые выбраны или выделены */
        .category-tag.selected {
            background-color: #28a745; /* Зеленый фон для выбранной категории */
            color: white; /* Белый текст для выделенной категории */
            border-color: #28a745; /* Цвет границы совпадает с фоном */
        }



    [data-theme="dark"] .category-badge {
        color: #1a1a1b; /* Цвет текста для темной темы */
    }

    .category-badge:hover {
        cursor: default;
    }


    .no-comments {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 20px;
        margin-top: 40px;
        text-align: center;
        color: #555;
        animation: fadeIn 1s ease-out; /* Плавное появление */
    }

        .no-comments i {
            font-size: 50px;
            color: #007bff;
            animation: bounce 1.5s infinite; /* Подпрыгивающая иконка */
        }

        .no-comments p {
            font-size: 18px;
            font-weight: 600;
            margin-top: 10px;
            color: var(--text-color); /* Цвет текста */
        }

    .likes i {
        font-size: 18px;
        color: #666; /* Цвет по умолчанию */
        transition: color 0.2s ease; /* Плавный переход цвета */
    }

        .likes i.liked {
            color: red; /* Красный цвет для активного лайка */
        }

    .favorite i {
        font-size: 18px;
        color: #666; /* Цвет по умолчанию */
        transition: color 0.2s ease; /* Плавный переход цвета */
    }

        .favorite i.favorited {
            color: yellow; /* Красный цвет для активного лайка */
        }

    /* Стиль для отдельных тегов */
    .tags {
        padding: 6px 8px;
        border-radius: 18px;
        color: var(--text-color);
        font-size: 12px;
        font-weight: 600;
        position: relative;
        cursor: pointer;
        transition: color 0.3s ease, transform 0.3s ease;
    }

    /* Стиль для отдельных тегов */
    .hide-tags {
        padding: 6px 8px;
        border-radius: 18px;
        color: var(--text-color);
        font-size: 12px;
        font-weight: 600;
        position: relative;
        cursor: pointer;
        transition: color 0.3s ease, transform 0.3s ease;
    }

</style>



<body>
    <div class="container">
        <!-- Навигация -->
        <nav>
            <a href="@Url.Action("Index", "Home")" class="back-link">← Назад</a>
            <div class="nav-right">
                @if (isOwner)
                {
                    <form method="post" asp-controller="Topic" asp-action="Delete"
                          onsubmit="return confirm('Вы уверены, что хотите удалить эту тему?');"
                          class="delete-topic-form">
                        <input type="hidden" name="topicId" value="@Model.Id" />
                        <button type="submit" class="delete-topic-btn">
                            <i class="bi bi-trash"></i> Удалить
                        </button>
                    </form>
                }
            </div>
        </nav>

        <!-- Заголовок, описание, автор, лайки и комментарии -->
        <div class="main-content">
            <div class="content-info">
                <!-- Имя автора -->
                <div class="content-info">
                    <div style="text-align: center;">

                        <div style="text-align: left;">
                        <span class="author">Автор: @Model.Author</span>
                        </div>

                        <div style="text-align: right;">
                            <span class="favorite" style="text-align: right;"><i class="bi bi-star"></i></span>
                        </div>
                    </div>
                    <div class="category-badge mt-auto" style="text-align: right;">
                        <!-- Каждая категория отображается отдельно -->
                        @foreach (var category in Model.Categories.Split(','))
                        {
                            <a class="category-tag" href="/Home/Categories?category=@category.Trim()">@category.Trim()</a>
                        }
                    </div>
                    <h1 class="title">@Model.Title</h1>
                    <p class="description">@Model.Content</p>
                </div>

                @if (ViewBag.Images != null && ViewBag.Images.Count > 0)
                {
                    <div class="image-gallery">
                        <!-- Отображаем первую картинку -->
                        <img id="currentImage" src="@ViewBag.Images[0].ImageUrl" alt="Full-size Image" class="img-fluid rounded" />

                        <!-- Кнопки для переключения -->
                        <button id="prevButton" class="nav-button prev-btn" onclick="changeImage(-1)">←</button>
                        <button id="nextButton" class="nav-button next-btn" onclick="changeImage(1)">→</button>
                    </div>
                }

            </div>
            <div class="interactions" style="display: flex; flex-direction: column; align-items: flex-start; gap: 8px;">

                <!-- Теги -->
                <div>
                    @if (!string.IsNullOrEmpty(Model.Tags))
                    {
                        var tags = Model.Tags.Split(',').Select(t => t.Trim()).ToList();
                        var displayedTags = tags.Take(5).ToList(); // Первые 5 тегов
                        var hiddenTags = tags.Skip(5).ToList(); // Остальные теги
                        var remainingCount = hiddenTags.Count;

                        // Разбиваем видимые теги на группы по 6 тегов
                        var displayedGrouped = displayedTags
                        .Select((tag, index) => new { tag, index })
                        .GroupBy(x => x.index / 5)  // Группируем по индексу, чтобы сделать группы по 6 тегов
                        .Select(g => g.Select(x => x.tag).ToList()) // Извлекаем теги
                        .ToList();


                        // Отображаем видимые теги
                        foreach (var tagGroup in displayedGrouped)
                        {
                            <div class="tags-row mb-1">
                                @foreach (var category in tagGroup)
                                {
                                    <span class="tags me-1">@category</span>
                                }

                            </div>
                        }

                        // Если есть скрытые теги
                        if (remainingCount > 0)
                        {
                            if (remainingCount > 0)
                            {
                                <button class="hide-tags btn" style="font-size: 14px; text-decoration:none;" onclick="toggleTags(this)">
                                    +@remainingCount
                                </button>
                            }
                            <div class="hidden-tags" style="max-height: 0; overflow: hidden; transition: max-height 0.5s ease;">
                                @foreach (var hiddenGroup in hiddenTags.Select((tag, index) => new { tag, index })
                               .GroupBy(x => x.index / 5) // Теги по группам 5
                               .Select(g => g.Select(x => x.tag).ToList()))
                                {
                                    <div class="tags-row mb-1">
                                        @foreach (var category in hiddenGroup)
                                        {
                                            <span class="tags me-1">@category</span>
                                        }
                                    </div>
                                }
                            </div>

                        }
                    }
                </div>


                <!-- Лайки -->
                <div class="interactions">
                    <span class="likes"><i class="bi bi-heart"></i> @Model.LikesCount</span>
                </div>
            </div>
        </div>

        <!-- Форма добавления комментария -->
        <div class="post-comment">
            <form method="post" asp-controller="Details" asp-action="CreateComment" class="comment-form">
                <textarea name="comment" placeholder="Добавить новый ответ..."></textarea>
                <input type="hidden" name="id_topic" value="@Model.Id" />
                <button class="btn btn-primary btn-group-sm mt-1" type="submit">Ответить</button>
            </form>
        </div>

        <!-- Разделение между комментарием и ответом -->
        <hr class="comments-separator">

        <!-- Секция комментариев -->
        <span class="comments-title">Ответы</span>
        <h3></h3>
        @if (ViewBag.Comments != null && ViewBag.Comments.Count > 0)
        {
            <ul class="comments-list">
                @foreach (var comment in ViewBag.Comments)
                {
                    <li class="comment-item">
                        <div class="comment-header d-flex align-items-center">
                            <img src="@Url.Content(@comment.avatar)" alt="Avatar" class="rounded-circle" style="width: 30px; height: 30px; object-fit: cover; margin-right: 8px;" />
                            <a class="comment-author back-link" href="@Url.Action("Users", "Profile", new { id = comment.id_users })">@comment.author</a>
                        </div>
                        <div class="comment-body">
                            <p>@comment.comments</p> <!-- Текст комментария -->
                            <div class="comment-actions d-flex align-items-center" style="margin-top: 8px;">
                                <button class="btn btn-sm btn-outline-primary me-2 reply-button" style="font-size: 12px; padding: 2px 8px; border-radius: 15px;">Ответить</button>
                                <button class="btn btn-sm btn-outline-danger" style="font-size: 12px; padding: 2px 8px; border-radius: 12px;">Пожаловаться</button>
                            </div>
                        </div>

                        <div class="reply-field mt-2" style="display: none;">
                            <textarea class="textarea" rows="2" placeholder="Напишите свой ответ..."></textarea>
                            <button class="btn btn-primary btn-sm mt-2">Отправить</button>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="no-comments">
                <i class="bi bi-chat-dots"></i>
                <p>Комментариев пока нет. Будьте первым!</p>
            </div>
        }
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Находим все кнопки "Ответить"
            const replyButtons = document.querySelectorAll('.reply-button');

            replyButtons.forEach(button => {
                button.addEventListener('click', function () {
                    // Ищем ближайшее поле для ответа
                    const replyField = this.closest('.comment-item').querySelector('.reply-field');

                    // Показываем или скрываем поле
                    if (replyField.style.display === 'none' || !replyField.style.display) {
                        replyField.style.display = 'block'; // Показать
                    } else {
                        replyField.style.display = 'none'; // Скрыть
                    }
                });
            });
        });
    </script>


    <script>
        const images = [
        @foreach (var image in ViewBag.Images)
        {
            <text>
                            {
                                url: '@image.ImageUrl'
                            },
            </text>
        }
        ];

        let currentIndex = 0; // Начальный индекс изображения

        // Функция для смены изображения
        function changeImage(direction) {
            currentIndex += direction;

            // Если индекс выходит за пределы массива, возвращаем в начало или в конец
            if (currentIndex < 0) {
                currentIndex = images.length - 1;
            } else if (currentIndex >= images.length) {
                currentIndex = 0;
            }

            // Обновление изображения
            document.getElementById('currentImage').src = images[currentIndex].url;
        }
    </script>

    <script>
        function toggleTags(button) {
            const hiddenTags = button.nextElementSibling; // Скрытые теги
            const isOpen = hiddenTags.style.maxHeight !== "0px" && hiddenTags.style.maxHeight !== ""; // Проверяем состояние

            if (isOpen) {
                // Скрываем теги
                hiddenTags.style.maxHeight = "0"; // Сворачиваем
                button.textContent = `+${hiddenTags.querySelectorAll('.tags').length}`; // Меняем текст на "+N"
            } else {
                // Показываем теги
                hiddenTags.style.maxHeight = `${hiddenTags.scrollHeight}px`; // Устанавливаем высоту
                button.textContent = "⮝"; // Меняем текст на "Скрыть"
            }
        }
    </script>
</body>
