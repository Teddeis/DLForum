@model Topic

@{
    ViewData["Title"] = "Модерирование";
}
<link rel="stylesheet" type="text/css" href="/css/details_style.css">



<body>
        <!-- Заголовок, описание, автор, лайки и комментарии -->
        <div class="main-content">
            <div class="content-info">
                <!-- Имя автора -->
                <div class="content-info">
                    <div>
                        <p class="author">Автор: @Model.Author</p>
                    </div>
                    <div class="category-badge mt-auto" style="text-align: right;">
                        <!-- Каждая категория отображается отдельно -->
                    @foreach (var category in @Model.Categories.Split(','))
                    {
                            <span class="category-tag">@category.Trim()</span>
                    }
                    </div>
                    <h1 class="title">@Model.Title</h1>
                <p class="description">@Html.Raw(Model.Content)</p>
            </div>

                @if (ViewBag.Images != null && ViewBag.Images.Count > 0)
                {
                    <div class="image-gallery">
                        <!-- Отображаем первую картинку -->
                        <img id="currentImage" src="@ViewBag.Images[0].ImageUrl" alt="Full-size Image" class="img-fluid rounded" />

                        <!-- Кнопки для переключения -->
                        <button id="prevButton" class="nav-button prev-btn" onclick="changeImage(-1)">←</button>
                        <button id="nextButton" class="nav-button next-btn" onclick="changeImage(1)">→</button>
                    </div>
                }

            </div>
            <div class="interactions" style="display: flex; flex-direction: column; align-items: flex-start; gap: 8px;">

                <!-- Теги -->
                <div>
                    @if (!string.IsNullOrEmpty(Model.Tags))
                    {
                        var tags = Model.Tags.Split(',').Select(t => t.Trim()).ToList();
                        var displayedTags = tags.Take(5).ToList(); // Первые 5 тегов
                        var hiddenTags = tags.Skip(5).ToList(); // Остальные теги
                        var remainingCount = hiddenTags.Count;

                        // Разбиваем видимые теги на группы по 6 тегов
                        var displayedGrouped = displayedTags
                        .Select((tag, index) => new { tag, index })
                        .GroupBy(x => x.index / 5)  // Группируем по индексу, чтобы сделать группы по 6 тегов
                        .Select(g => g.Select(x => x.tag).ToList()) // Извлекаем теги
                        .ToList();


                        // Отображаем видимые теги
                        foreach (var tagGroup in displayedGrouped)
                        {
                            <div class="tags-row mb-1">
                                @foreach (var category in tagGroup)
                                {
                                    <span class="tags me-1">@category</span>
                                }

                            </div>
                        }

                        // Если есть скрытые теги
                        if (remainingCount > 0)
                        {
                            if (remainingCount > 0)
                            {
                                <button class="hide-tags btn" style="font-size: 14px; text-decoration:none;" onclick="toggleTags(this)">
                                    +@remainingCount
                                </button>
                            }
                            <div class="hidden-tags" style="max-height: 0; overflow: hidden; transition: max-height 0.5s ease;">
                                @foreach (var hiddenGroup in hiddenTags.Select((tag, index) => new { tag, index })
                               .GroupBy(x => x.index / 5) // Теги по группам 5
                               .Select(g => g.Select(x => x.tag).ToList()))
                                {
                                    <div class="tags-row mb-1">
                                        @foreach (var category in hiddenGroup)
                                        {
                                            <span class="tags me-1">@category</span>
                                        }
                                    </div>
                                }
                            </div>

                        }
                    }
                </div>
            </div>
        </div>


    <script>
        const images = [
        @foreach (var image in ViewBag.Images)
        {
            <text>
                                {
                                    url: '@image.ImageUrl'
                                },
            </text>
        }
        ];

        let currentIndex = 0; // Начальный индекс изображения

        // Функция для смены изображения
        function changeImage(direction) {
            currentIndex += direction;

            // Если индекс выходит за пределы массива, возвращаем в начало или в конец
            if (currentIndex < 0) {
                currentIndex = images.length - 1;
            } else if (currentIndex >= images.length) {
                currentIndex = 0;
            }

            // Обновление изображения
            document.getElementById('currentImage').src = images[currentIndex].url;
        }
    </script>

    <script>
        function toggleTags(button) {
            const hiddenTags = button.nextElementSibling; // Скрытые теги
            const isOpen = hiddenTags.style.maxHeight !== "0px" && hiddenTags.style.maxHeight !== ""; // Проверяем состояние

            if (isOpen) {
                // Скрываем теги
                hiddenTags.style.maxHeight = "0"; // Сворачиваем
                button.textContent = `+${hiddenTags.querySelectorAll('.tags').length}`; // Меняем текст на "+N"
            } else {
                // Показываем теги
                hiddenTags.style.maxHeight = `${hiddenTags.scrollHeight}px`; // Устанавливаем высоту
                button.textContent = "⮝"; // Меняем текст на "Скрыть"
            }
        }
    </script>

        <div class="answers">
            <div class="d-flex justify-content-start align-items-start rounded">
                <!-- Форма для принятия темы -->
                @if (@Model.Status == "false")
                {
                    <form method="post" asp-controller="Topic" asp-action="UpdateStatusToTrue" asp-route-topicId="@Model.Id">
                        <button type="submit" class="btn btn-light text-lg-center text-center text-white mx-1" style="border-radius: 10px; background-color: #2a5c03;">
                            <i style="font-size: 18px; margin-right: 5px;"></i> Принять тему
                        </button>
                    </form>
                }

            @if (Model.Status == "false")
            {
                <!-- Кнопка для открытия модального окна -->
                <button type="button" class="btn btn-light text-white mx-1"
                        style="border-radius: 10px; background-color: #e34234;"
                        onclick="openCancelModal(@Model.Id)">
                    <i style="font-size: 18px; margin-right: 5px;"></i> Отменить тему
                </button>
            }


            <style>
                
            </style>


            <!-- Модальное окно -->
            <div id="cancelModal" class="modal fade" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content p-4" style="border-radius: 12px;">
                        <div class="modal-header border-0">
                            <h5 class="modal-title text-danger">Отмена темы</h5>
                            <button type="button" class="close btn btn-light" onclick="closeCancelModal()" aria-label="Закрыть">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p class="text-muted">Укажите причину отмены темы:</p>
                            <textarea id="cancelReason" rows="4" class="form-control" placeholder="Введите причину..." required></textarea>
                        </div>
                        <div class="modal-footer border-0">
                            <button type="button" class="btn btn-secondary" onclick="closeCancelModal()">Отмена</button>
                            <button type="button" class="btn btn-danger" onclick="submitCancel()">Подтвердить</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Форма (скрытая) для отправки данных на сервер -->
            <form id="cancelForm" method="post" asp-controller="Topic" asp-action="UpdateStatusToNone">
                <input type="hidden" name="topicId" value="@Model.Id">
                <input type="hidden" name="userId" value="@Model.UserId">
                <input type="hidden" id="cancelReasonInput" name="message"> <!-- Исправлено: теперь совпадает с параметром в контроллере -->
            </form>

            <script>
                function openCancelModal() {
                    let modal = new bootstrap.Modal(document.getElementById('cancelModal'));
                    modal.show();
                }

                function closeCancelModal() {
                    let modalEl = document.getElementById('cancelModal');
                    let modal = bootstrap.Modal.getInstance(modalEl);
                    modal.hide();
                }

                function submitCancel() {
                    let reason = document.getElementById("cancelReason").value.trim();
                    if (!reason) {
                        alert("Введите причину отмены!");
                        return;
                    }

                    // Записываем причину отмены в скрытое поле формы
                    document.getElementById("cancelReasonInput").value = reason;

                    // Закрываем модальное окно перед отправкой
                    closeCancelModal();

                    // Отправляем форму
                    document.getElementById("cancelForm").submit();
                }
            </script>

            </div>
        </div>
</body>
